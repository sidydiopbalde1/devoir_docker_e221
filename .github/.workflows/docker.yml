name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ========== JOB 1: BUILD & PUSH ==========
  docker:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/devoir_docker_e221
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image build summary
        run: |
          echo "üê≥ **Image Docker construite avec succ√®s!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã **D√©tails:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Plateformes:** linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY

  # ========== JOB 2: DEPLOY TO RENDER (uniquement sur main) ==========
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production  # Protection pour la production
    
    steps:
      - name: Deploy to Render
        run: |
          echo "üöÄ D√©clenchement du d√©ploiement sur Render..."
          
          # D√©clencher le webhook de d√©ploiement Render
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
            "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "clearCache": true,
              "imageTag": "${{ github.sha }}"
            }')
          
          HTTP_CODE=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          RESPONSE_BODY=$(echo $RESPONSE | sed -e 's/HTTPSTATUS:.*//g')
          
          if [ $HTTP_CODE -eq 200 ] || [ $HTTP_CODE -eq 201 ]; then
            echo "‚úÖ D√©ploiement d√©clench√© avec succ√®s (HTTP $HTTP_CODE)"
          else
            echo "‚ùå Erreur lors du d√©clenchement du d√©ploiement (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi

      - name: Wait for deployment
        run: |
          echo "‚è≥ Attente de la finalisation du d√©ploiement..."
          echo "‚ÑπÔ∏è  Le d√©ploiement sur Render peut prendre 2-5 minutes..."
          sleep 120  # Attendre 2 minutes pour laisser le temps au d√©ploiement

      - name: Health check
        run: |
          echo "üîç V√©rification de sant√© de l'application..."
          
          MAX_ATTEMPTS=5
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Tentative $ATTEMPT/$MAX_ATTEMPTS..."
            
            if curl -f -s --max-time 30 "${{ secrets.RENDER_APP_URL }}/health" > /dev/null 2>&1; then
              echo "‚úÖ Application d√©ploy√©e et accessible!"
              echo "üåê URL: ${{ secrets.RENDER_APP_URL }}"
              break
            else
              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "‚ùå √âchec de la v√©rification de sant√© apr√®s $MAX_ATTEMPTS tentatives"
                echo "‚ö†Ô∏è  L'application pourrait encore √™tre en cours de d√©marrage"
                # Ne pas faire √©chouer le d√©ploiement, juste avertir
                echo "::warning::Health check failed, but deployment may still be in progress"
              else
                echo "‚è≥ Tentative √©chou√©e, nouvelle tentative dans 30 secondes..."
                sleep 30
              fi
            fi
            
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Deployment summary
        run: |
          echo "üéâ **D√©ploiement termin√©!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìã **Informations:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Application URL:** [${{ secrets.RENDER_APP_URL }}](${{ secrets.RENDER_APP_URL }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Health Check:** [${{ secrets.RENDER_APP_URL }}/health](${{ secrets.RENDER_APP_URL }}/health)" >> $GITHUB_STEP_SUMMARY
          echo "- **Image utilis√©e:** ${{ needs.docker.outputs.image-tags }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ú® **Votre application est maintenant live sur Render!**" >> $GITHUB_STEP_SUMMARY

  # ========== JOB 3: NOTIFICATION (optionnel) ==========
  notify:
    needs: [docker, deploy]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ D√©ploiement r√©ussi!"
            echo "‚úÖ Build: ${{ needs.docker.result }}"
            echo "‚úÖ Deploy: ${{ needs.deploy.result }}"
          else
            echo "‚ö†Ô∏è Probl√®me d√©tect√©:"
            echo "Build: ${{ needs.docker.result }}"
            echo "Deploy: ${{ needs.deploy.result }}"
          fi