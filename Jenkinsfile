
pipeline {
  agent any

  options {
    timestamps()

  }

  environment {
  
    DOCKERHUB_CREDS = credentials("dockerhub-creds") 
    RENDER_DEPLOY_HOOK = credentials("render-webhook") 
    IMAGE_NAME = "${DOCKERHUB_CREDS_USR}/mon_application_ci_cd" 
  }

  triggers {
    githubPush() // D√©clenchement automatique sur push GitHub
    // pollSCM("H/5 * * * *") // Optionnel: Polling toutes les 5 minutes (peut √™tre utile pour les d√©p√¥ts non-GitHub ou en cas de probl√®me de webhook)
  }

  stages {

    stage("Checkout") {
      steps {
        echo "üì• R√©cup√©ration du code source..."
        checkout scm
      }
    }

    stage("Build & Push Docker Image") {
      steps {
        script {
          // R√©cup√®re le nom de branche fourni par Jenkins (selon le type de job)
          // BRANCH_NAME (multibranch) ou GIT_BRANCH (pipeline from SCM), fallback = 'main'
          def src = (env.BRANCH_NAME ?: env.GIT_BRANCH ?: 'main')

          // Sanitize pour un tag Docker valide : remplace tout caract√®re non autoris√© par '-'
          // Ex : "feature/my-feature" -> "feature-my-feature"
          def safeTag = src.replaceAll('[^A-Za-z0-9._-]', '-')

          // Nom complet de l'image √† builder/pusher
          def imageTag = "${IMAGE_NAME}:${safeTag}-${env.BUILD_NUMBER}"
          def latestImageTag = "${IMAGE_NAME}:latest"

          echo "üê≥ Construction de l'image Docker: ${imageTag}"
          docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
            def app = docker.build(imageTag, '.')
            echo "üì§ Publication de l'image Docker: ${imageTag}"
            app.push()
            app.push("latest") // Ajoute un tag 'latest' pour la derni√®re version r√©ussie
          }
          echo "‚úÖ Image Docker construite et publi√©e avec succ√®s."
        }
      }
    }

    stage("Deploy to Render (Test Environment)") {
      steps {
        echo "üöÄ D√©clenchement du d√©ploiement sur Render..."
        withCredentials([string(credentialsId: 'render-webhook', variable: 'HOOK_URL')]) {
          sh "curl -i -X POST \"${HOOK_URL}\""
        }
        echo "‚úÖ D√©ploiement d√©clench√©."
      }
    }
  }

  post {
    always {
      cleanWs() // Nettoie le workspace apr√®s chaque ex√©cution
      echo "‚ú® Pipeline termin√©."
    }
    success {
      echo "üéâ Succ√®s: Le pipeline s'est termin√© avec succ√®s!"
      // Envoyer une notification par email en cas de succ√®s (n√©cessite le plugin Email Extension)
       mail to: "newsdb191@gmail.com", subject: "Jenkins Build Succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}", body: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} succeeded. Check ${env.BUILD_URL}"
    }
    failure {
      echo "‚ùå √âchec: Le pipeline a √©chou√©."
      // Envoyer une notification par email en cas d'√©chec
       mail to: "newsdb191@gmail.com", subject: "Jenkins Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}", body: "Build ${env.BUILD_NUMBER} of ${env.JOB_NAME} failed. Check ${env.BUILD_URL}"
    }
  }
}


